package aircraftsurveillance.transponder.adsb1090;

/**
 * Purpose: To report resolution advisories generated by TCAS equipment.
 */

/* 1-5   Format type code = 28
 * 6-8   Subtype code = 2
 * 9-22  Active resolution advisories
 * 23-26 RACs record
 * 27    RA terminated
 * 28    Multiple threat encounter
 * 29-30 Threat type indicator
 * 31-56 Threat identity data
 */

public class ResolutionAdvisory extends AircraftStatus {

    private int activeResolutionAdvisories;
    private int racRecord;
    private boolean raTerminated;
    private boolean multipleThreatEncounter;
    private int threatTypeIndicator;
    private int threatIdentityData;

    private ResolutionAdvisory() {

    }

    /**
     * Decodes 7 bytes of data into an ADS-B Resolution Advisory message.
     *
     * @param data an int array containing the 7 bytes to be decoded
     * @return the decoded ADS-B Resolution Advisory message
     * @throws Adsb1090ParseException
     */
    public static ResolutionAdvisory parse(int[] data) throws Adsb1090ParseException {
        // verify the data is not null
        if (data == null) {
            throw new Adsb1090ParseException("ResolutionAdvisory.parse(data): data == null");
        }

        // verify the data is the correct length
        if (data.length != 7) {
            throw new Adsb1090ParseException("ResolutionAdvisory.parse(data): data.length != 7 (data.length == " + data.length + ")");
        }

        ResolutionAdvisory message = new ResolutionAdvisory();
        message.originalMessage = data.clone();

        // verify the type code
        message.typeCode = extractInt(data, 0, 5);
        // valid type code is 28
        if (message.typeCode != 28) {
            throw new Adsb1090ParseException("ResolutionAdvisory.parse(data): type code is not valid (type code == " + message.typeCode + ")");
        }

        // verify the subtype code
        message.subtypeCode = extractInt(data, 5, 3);
        // valid sub type code is 2
        if (message.subtypeCode != 2) {
            throw new Adsb1090ParseException("ResolutionAdvisory.parse(data): sub type code is not valid (sub type code == " + message.subtypeCode + ")");
        }

        message.activeResolutionAdvisories = extractInt(data, 8, 14);
        message.racRecord = extractInt(data, 22, 4);
        message.raTerminated = extractBoolean(data, 26);
        message.multipleThreatEncounter = extractBoolean(data, 27);
        message.threatTypeIndicator = extractInt(data, 28, 2);
        message.threatIdentityData = extractInt(data, 30, 26);

        return message;
    }

    /**
     * @return a String representing the ADS-B Resolution Advisory message
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("ResolutionAdvisory");
        sb.append(System.lineSeparator());
        sb.append("original message = 0x");
        for (int p = 0; p < originalMessage.length; p++)
            sb.append(String.format("%02x", originalMessage[p]));
        sb.append(System.lineSeparator());
        sb.append("type code = " + typeCode);
        sb.append(System.lineSeparator());
        sb.append("sub type code = " + subtypeCode);
        sb.append(System.lineSeparator());
        sb.append("active resolution advisories = " + activeResolutionAdvisories);
        sb.append(System.lineSeparator());
        sb.append("RAC record = " + racRecord);
        sb.append(System.lineSeparator());
        sb.append("RA terminated = " + raTerminated);
        sb.append(System.lineSeparator());
        sb.append("multiple threat encounter = " + multipleThreatEncounter);
        sb.append(System.lineSeparator());
        sb.append("threat type indicator = " + threatTypeIndicator);
        sb.append(System.lineSeparator());
        sb.append("threat identity data = " + threatIdentityData);
        sb.append(System.lineSeparator());

        return sb.toString();
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return active resolution advisories
     */
    public int getActiveResolutionAdvisories() {
        return activeResolutionAdvisories;
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return RACs record
     */
    public int getRacRecord() {
        return racRecord;
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return
     */
    public boolean getRaTerminated() {
        return raTerminated;
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return
     */
    public boolean getMultipleThreatEncounter() {
        return multipleThreatEncounter;
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return threat type indicator
     */
    public int getThreatTypeIndicator() {
        return threatTypeIndicator;
    }

    /**
     * See ICAO Annex 10, Vol IV, 4.3.8.4.2.2
     *
     * @return threat identity data
     */
    public int getThreatIdentityData() {
        return threatIdentityData;
    }

}
